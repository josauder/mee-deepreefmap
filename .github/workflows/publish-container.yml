name: CI

# This workflow builds a docker image and pushes it
# to the github package registry

on:
  push:
    branches:
      - main
    # Publish semver tags as releases.
    tags: [ '*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      # The digest of the built image.
      digest: ${{ steps.build-and-push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.1.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push.outputs.digest }}


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # This is used to trigger the correct Gitlab CI pipeline:
      #   push to main: update dev deployment
      #   push a tag: update stage, trigger prod merge req.
      - name: Deploy application to dev
        if: ${{ github.ref }} == "refs/heads/main"
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.CD_TOKEN }}" \
          ${{ secrets.CD_URI }} \
          -d '{
            "event_type": "update-manifest",
            "client_payload": {
              "digest": "${{ needs.build.outputs.digest }}",
              "repo_name": "${{ secrets.CD_REPO }}",
              "repo_org": "${{ secrets.CD_ORG }}",
              "branch": "dev"
            }
          }'

      - name: Deploy to stage rules (defined in CD pipeline)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.CD_TOKEN }}" \
          ${{ secrets.CD_URI }} \
          -d '{
            "event_type": "update-manifest",
            "client_payload": {
              "digest": "${{ needs.build.outputs.digest }}",
              "repo_name": "${{ secrets.CD_REPO }}",
              "repo_org": "${{ secrets.CD_ORG }}",
              "branch": "stage"
            }
          }'

      - name: Deploy to prod rules (defined in CD pipeline)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.CD_TOKEN }}" \
          ${{ secrets.CD_URI }} \
          -d '{
            "event_type": "update-manifest",
            "client_payload": {
              "digest": "${{ needs.build.outputs.digest }}",
              "repo_name": "${{ secrets.CD_REPO }}",
              "repo_org": "${{ secrets.CD_ORG }}",
              "branch": "prod"
            }
          }'
